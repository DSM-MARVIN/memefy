{"version":3,"sources":["meme-code/logo2.png","meme-code/memeimg.jpg","meme-code/Head.js","meme-code/Mainsec.js","meme-code/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","logo","require","Head","className","src","width","image","Mainsec","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","randomNum","Math","floor","random","length","randomMemeImg","url","onSubmit","type","placeholder","onChange","alt","height","React","Component","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,wECCvCC,G,MAAOC,EAAQ,KAYJC,MAVf,WACI,OACI,yBAAKC,UAAU,QAEX,uBAAGA,UAAU,aAAY,yBAAKC,IAAKJ,EAAMK,MAAM,SAA/C,cACA,+B,0CCPRC,EAAQL,EAAQ,IA0ELM,E,kDAtEX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,QAAU,GACVC,WAAa,GACbC,UAAYL,EACZM,YAAc,IAElB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATX,E,gEAYO,IAAD,OACfE,MAAM,qCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACRE,EAASF,EAASG,KAAlBD,MAEP,EAAKE,SAAS,CAACV,YAAcQ,S,mCAIxBG,GAAO,IAAD,EACOA,EAAMC,OAArBC,EADQ,EACRA,KAAMC,EADE,EACFA,MACbC,KAAKL,SAAL,eAAgBG,EAAQC,M,mCAGfH,GACTA,EAAMK,iBACN,IAAMC,EAAYC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKnB,MAAMI,YAAYqB,QAC9DC,EAAgBP,KAAKnB,MAAMI,YAAYiB,GAAWM,IACxDR,KAAKL,SAAS,CAACX,UAAYuB,M,+BAM3B,OACI,6BACI,0BAAME,SAAUT,KAAKZ,cACjB,2BACIZ,UAAU,qBACVkC,KAAK,OACLZ,KAAK,UACLa,YAAY,WACZZ,MAAOC,KAAKnB,MAAMC,QAClB8B,SAAUZ,KAAKd,eAEnB,2BACIV,UAAU,qBACVkC,KAAK,OACLZ,KAAK,aACLa,YAAY,cACZZ,MAAOC,KAAKnB,MAAME,WAClB6B,SAAUZ,KAAKd,eAGnB,4BAAQV,UAAU,mBAAlB,aAEJ,yBAAKA,UAAU,WACX,yBAAKC,IAAKuB,KAAKnB,MAAMG,UAAW6B,IAAI,OAAOC,OAAO,QAAQtC,UAAU,aACpE,wBAAIA,UAAU,OAAOwB,KAAKnB,MAAMC,SAChC,wBAAIN,UAAU,UAAUwB,KAAKnB,MAAME,kB,GAhEjCgC,IAAMC,WCSbC,MAVf,WACI,OACI,6BACI,gCACI,gECaDC,MAZf,WACE,OACE,yBAAK1C,UAAU,OACb,4BAAQA,UAAU,cACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDW2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b80e4ef9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo2.42fd59f3.png\";","module.exports = __webpack_public_path__ + \"static/media/memeimg.89245447.jpg\";","import React from 'react'\r\nlet logo = require('./logo2.png')\r\n\r\nfunction Head(){\r\n    return(\r\n        <div className=\"head\">\r\n            \r\n            <p className=\"head-text\"><img src={logo} width=\"70px\"/>MEMEFY.COM</p>\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Head;","import React from 'react';\r\nlet image = require('../meme-code/memeimg.jpg')\r\n\r\nclass Mainsec extends React.Component{\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            topText : \"\",\r\n            bottomText : \"\",\r\n            randomImg : image,\r\n            allMemeImgs : []\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            const {memes} = response.data\r\n            // console.log(memes[0])\r\n            this.setState({allMemeImgs : memes})\r\n        })\r\n    }\r\n\r\n    handleChange(event){\r\n        const {name, value} = event.target\r\n        this.setState({[name] : value})\r\n    }\r\n\r\n    handleSubmit(event){\r\n        event.preventDefault()\r\n        const randomNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n        const randomMemeImg = this.state.allMemeImgs[randomNum].url\r\n        this.setState({randomImg : randomMemeImg})\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input \r\n                        className='input form-control'\r\n                        type='text'\r\n                        name='topText'\r\n                        placeholder='top text'\r\n                        value={this.state.topText}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <input\r\n                        className='input form-control'\r\n                        type='text'\r\n                        name='bottomText'\r\n                        placeholder='bottom text'\r\n                        value={this.state.bottomText}\r\n                        onChange={this.handleChange}\r\n                    />\r\n\r\n                    <button className='btn btn-primary'>Generate</button>\r\n                </form>\r\n                <div className=\"imgmeme\">\r\n                    <img src={this.state.randomImg} alt=\"meme\" height=\"400px\" className='main-img' />\r\n                    <h2 className='top'>{this.state.topText}</h2>\r\n                    <h2 className='bottom'>{this.state.bottomText}</h2>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Mainsec;","import React from 'react'\r\n\r\nfunction Footer(){\r\n    return(\r\n        <div>\r\n            <footer>\r\n                <p>&copy; copyright DSM-MARVIN 2020</p>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Head from './meme-code/Head';\nimport Mainsec from './meme-code/Mainsec';\nimport Footer from './meme-code/Footer';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n         <Head />\n         <Mainsec />\n         <Footer />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}